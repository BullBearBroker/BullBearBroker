import os

import sqlalchemy as sa


def _set_search_path(connection, schema: str | None) -> None:
    if not schema:
        return
    # schema names generated by the helper are safe (alphanumeric + underscore)
    connection.exec_driver_sql(f"SET search_path TO {schema}, public")


def main() -> None:
    url = os.environ.get("SUPABASE_DB_POOL_URL") or os.environ.get("SUPABASE_DB_URL")
    if not url:
        raise SystemExit("No DB URL in env")

    schema = os.environ.get("TEST_SCHEMA")
    connect_args: dict[str, object] = {
        "prepare_threshold": None,
        "sslmode": "require",
    }
    if schema:
        connect_args["options"] = f"-c search_path={schema},public"

    engine = sa.create_engine(url, pool_pre_ping=True, connect_args=connect_args)

    inserted = False
    with engine.begin() as cx:
        _set_search_path(cx, schema)

        exists = cx.exec_driver_sql("SELECT to_regclass('""users""')").scalar()
        if exists is None:
            print("SEED_SKIP: users table not present")
            return

        cx.exec_driver_sql(
            """
            INSERT INTO users (id, email, password_hash, created_at, updated_at, mfa_enabled)
            VALUES (
                '00000000-0000-0000-0000-000000000001',
                'test@example.com',
                'x',
                NOW(),
                NOW(),
                false
            )
            ON CONFLICT (id) DO NOTHING
            """
        )
        inserted = True

    if inserted:
        print("SEED_OK")


if __name__ == "__main__":
    main()
